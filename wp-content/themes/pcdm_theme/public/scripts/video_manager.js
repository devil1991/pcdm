// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.VideoManager = (function() {
    function VideoManager(ref) {
      this.ref = ref;
      this.onVideoFinish = __bind(this.onVideoFinish, this);
      this.onVideoReady = __bind(this.onVideoReady, this);
      this.onVideoClosed = __bind(this.onVideoClosed, this);
      this.onVideoOpened = __bind(this.onVideoOpened, this);
      this.onCloseClick = __bind(this.onCloseClick, this);
      this.onLinkClick = __bind(this.onLinkClick, this);
      this.items = this.ref.find('.item-video');
      if (this.items.length > 0) {
        this.video_array = [];
        this.dur = 1;
        window.onVideoReady = this.onVideoReady;
        event_emitter.addListener('VIDEO_FINISH', this.onVideoFinish);
        this.setVideoArray();
        this.setInteractions();
      }
    }

    VideoManager.prototype.setVideoArray = function() {
      var close, cover, i, id, instance, item, obj, play_ico, play_text, video, vimeo, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.items.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        item = $(this.items[i]);
        play_text = item.find('.wrap-more .more');
        video = item.find('.wrap-video');
        cover = video.find('.link-video');
        play_ico = cover.find('.ico-video');
        close = video.find('.close');
        vimeo = video.find('.js-vimeo');
        id = vimeo.attr('id');
        instance = new VimeoPlayer(vimeo);
        obj = {
          id: id,
          instance: instance,
          is_ready: true,
          is_enabled: true,
          play_text: play_text,
          play_ico: play_ico,
          cover: cover,
          close: close
        };
        _results.push(this.video_array.push(obj));
      }
      return _results;
    };

    VideoManager.prototype.setInteractions = function(id) {
      var i, video, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.video_array.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        video = this.video_array[i];
        id = video.id;
        video.play_text.attr('data-id', id).bind('click', this.onLinkClick);
        video.cover.attr('data-id', id).bind('click', this.onLinkClick);
        _results.push(video.close.attr('data-id', id).bind('click', this.onCloseClick));
      }
      return _results;
    };

    VideoManager.prototype.onLinkClick = function(e) {
      var id, video;
      e.preventDefault();
      id = $(e.currentTarget).attr('data-id');
      video = this.getVideoById(id);
      if (video.is_ready) {
        return this.openVideo(id);
      }
    };

    VideoManager.prototype.onCloseClick = function(e) {
      var id, video;
      e.preventDefault();
      id = $(e.currentTarget).attr('data-id');
      video = this.getVideoById(id);
      return this.closeVideo(id);
    };

    VideoManager.prototype.openVideo = function(id) {
      var video;
      video = this.getVideoById(id);
      if (video.is_enabled) {
        video.is_enabled = false;
        video.play_text.css({
          visibility: 'hidden'
        });
        return TweenLite.to(video.cover, this.dur, {
          css: {
            'opacity': '0'
          },
          ease: Power4.easeInOut,
          onComplete: this.onVideoOpened,
          onCompleteParams: [video]
        });
      }
    };

    VideoManager.prototype.onVideoOpened = function(video) {
      video.cover.hide();
      video.instance.play();
      return video.is_enabled = true;
    };

    VideoManager.prototype.closeVideo = function(id) {
      var video;
      video = this.getVideoById(id);
      if (video.is_enabled) {
        video.is_enabled = false;
        video.instance.stop();
        video.cover.show();
        return TweenLite.to(video.cover, this.dur, {
          css: {
            'opacity': '1'
          },
          ease: Power4.easeInOut,
          onComplete: this.onVideoClosed,
          onCompleteParams: [video]
        });
      }
    };

    VideoManager.prototype.onVideoClosed = function(video) {
      video.instance.reset();
      video.play_text.css({
        visibility: 'visible'
      });
      return video.is_enabled = true;
    };

    VideoManager.prototype.onVideoReady = function(id) {
      var video;
      video = this.getVideoById(id);
      video.play_text.css({
        visibility: 'visible'
      });
      video.play_ico.css({
        visibility: 'visible'
      });
      return video.is_ready = true;
    };

    VideoManager.prototype.onVideoFinish = function(id) {
      return this.closeVideo(id);
    };

    VideoManager.prototype.getVideoById = function(id) {
      var i, index, video, _i, _ref;
      index = 0;
      for (i = _i = 0, _ref = this.video_array.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        video = this.video_array[i];
        if (video.id === id) {
          index = i;
          break;
        }
      }
      video = this.video_array[index];
      return video;
    };

    return VideoManager;

  })();

}).call(this);
