// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.HeaderMenu = (function() {
    function HeaderMenu(ref) {
      this.ref = ref;
      this.onScroll = __bind(this.onScroll, this);
      this.onDropdownItemOut = __bind(this.onDropdownItemOut, this);
      this.onDropdownItemOver = __bind(this.onDropdownItemOver, this);
      this.onDropdownElementOut = __bind(this.onDropdownElementOut, this);
      this.onDropdownElementOver = __bind(this.onDropdownElementOver, this);
      this.logo = this.ref.find('.logo');
      this.dropdown_elements = this.ref.find('.right-navigation .wrap-navbar .first-level >li.dropdown');
      this.active_item;
      this.scroll_threshold = this.ref.height();
      this.logo_h = parseInt(this.logo.css('top')) + this.logo.height();
      this.logo_speed = this.logo_h / this.ref.height();
      this.small_h = window.small_header_height;
      this.is_small = false;
      this.dur = 1;
      if (!is_smartphone) {
        if (this.dropdown_elements.length > 0) {
          this.setDropdownElements();
        }
      }
    }

    HeaderMenu.prototype.setDropdownElements = function() {
      var dropdown, element, i, item, items, j, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.dropdown_elements.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        element = $(this.dropdown_elements[i]);
        dropdown = element.find('.wrap-dropdown-menu');
        element.attr('data-height', dropdown.height());
        element.bind('mouseenter', this.onDropdownElementOver);
        element.bind('mouseleave', this.onDropdownElementOut);
        dropdown.hide();
        dropdown.css({
          opacity: '0',
          height: '0'
        });
        items = dropdown.find('.dropdown-menu >li >a');
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (j = _j = 0, _ref1 = items.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
            item = $(items[j]);
            if (this.arrow_w === void 0) {
              this.arrow_w = item.find('.arrow-left').width();
            }
            if (item.hasClass('active')) {
              this.active_item = item;
              item.bind('click', (function(e) {
                return e.preventDefault();
              }));
            }
            if (!item.hasClass('active')) {
              item.bind('mouseenter', this.onDropdownItemOver);
              _results1.push(item.bind('mouseleave', this.onDropdownItemOut));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    HeaderMenu.prototype.onDropdownElementOver = function(e) {
      var dropdown, element;
      element = $(e.currentTarget);
      element.addClass('opened');
      dropdown = element.find('.wrap-dropdown-menu');
      dropdown.show();
      return TweenLite.to(dropdown, this.dur, {
        css: {
          'opacity': '1',
          'height': "" + (element.attr('data-height')) + "px"
        },
        ease: Power4.easeInOut
      });
    };

    HeaderMenu.prototype.onDropdownElementOut = function(e) {
      var dropdown, element;
      element = $(e.currentTarget);
      element.removeClass('opened');
      dropdown = element.find('.wrap-dropdown-menu');
      return TweenLite.to(dropdown, this.dur, {
        css: {
          'opacity': '0',
          'height': '0'
        },
        ease: Power4.easeInOut,
        onComplete: (function() {
          return dropdown.hide();
        })
      });
    };

    HeaderMenu.prototype.onDropdownItemOver = function(e) {
      var item;
      item = $(e.currentTarget);
      this.moveItemArrows(item, 1);
      return this.moveItemArrows(this.active_item, -1);
    };

    HeaderMenu.prototype.onDropdownItemOut = function(e) {
      var item;
      item = $(e.currentTarget);
      this.moveItemArrows(item, -1);
      return this.moveItemArrows(this.active_item, 1);
    };

    HeaderMenu.prototype.moveItemArrows = function(item, dir) {
      var arrow_left, arrow_right;
      arrow_left = item.find('.arrow-left');
      arrow_right = item.find('.arrow-right');
      if (dir > 0) {
        TweenLite.to(arrow_left, .75 * this.dur, {
          css: {
            'left': '0'
          },
          ease: Power4.easeInOut
        });
        return TweenLite.to(arrow_right, .75 * this.dur, {
          css: {
            'right': '0'
          },
          ease: Power4.easeInOut
        });
      } else {
        TweenLite.to(arrow_left, .75 * this.dur, {
          css: {
            'left': "" + (-this.arrow_w) + "px"
          },
          ease: Power4.easeInOut
        });
        return TweenLite.to(arrow_right, .75 * this.dur, {
          css: {
            'right': "" + (-this.arrow_w) + "px"
          },
          ease: Power4.easeInOut
        });
      }
    };

    HeaderMenu.prototype.onScroll = function(val) {
      var pos,
        _this = this;
      if (!is_mobile) {
        pos = Math.max(0, Math.min(val, this.scroll_threshold));
        this.logo.css({
          'margin-top': "" + (-this.logo_speed * pos) + "px"
        });
        if (pos >= this.scroll_threshold && !this.is_small) {
          this.is_small = true;
          this.ref.addClass('header-small');
          this.ref.css({
            top: "" + (-this.small_h) + "px"
          });
          return TweenLite.to(this.ref, this.dur, {
            css: {
              'top': '0'
            },
            ease: Power4.easeInOut
          });
        } else if (pos < this.scroll_threshold && this.is_small) {
          this.is_small = false;
          return TweenLite.to(this.ref, .5 * this.dur, {
            css: {
              'top': "" + (-this.small_h) + "px"
            },
            ease: Power4.easeIn,
            onComplete: (function() {
              _this.ref.removeClass('header-small');
              _this.ref.css({
                top: "" + (-_this.logo_h) + "px"
              });
              return TweenLite.to(_this.ref, .75 * _this.dur, {
                css: {
                  'top': '0'
                },
                ease: Power4.easeOut
              });
            })
          });
        }
      }
    };

    return HeaderMenu;

  })();

}).call(this);
